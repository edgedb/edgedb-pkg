apiVersion: v1
kind: Namespace
metadata:
  name: "<service-name>"
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: "<service-name>-nginx-conf"
  labels:
    app: "<service-name>"
data:
  nginx.conf: |
    user nginx;
    worker_processes  1;
    error_log  /dev/stderr warn;
    pid        /var/run/nginx.pid;
    events {
      worker_connections  1024;
    }
    http {
      default_type  application/octet-stream;
      log_format  main
              'remote_addr:$remote_addr\t'
              'time_local:$time_local\t'
              'method:$request_method\t'
              'uri:$request_uri\t'
              'host:$host\t'
              'status:$status\t'
              'bytes_sent:$body_bytes_sent\t'
              'referer:$http_referer\t'
              'useragent:$http_user_agent\t'
              'forwardedfor:$http_x_forwarded_for\t'
              'forwardedproto:$http_x_forwarded_proto\t'
              'request_time:$request_time';
      access_log  /dev/stdout main;
      sendfile        on;
      keepalive_timeout  65;

      map $request_filename $expires {
        default          off;
        ~*^.*\.rpm$      max;
        ~*^.*\.deb$      max;
        ~*^.*\.pkg$      max;
        ~*^.*\.tar\..*$  max;
      }

      map $request_filename $cache_control {
        default          "no-store, no-cache, private";
        ~*^.*\.rpm$      "public, no-transform";
        ~*^.*\.deb$      "public, no-transform";
        ~*^.*\.pkg$      "public, no-transform";
        ~*^.*\.tar\..*$  "public, no-transform";
      }

      server {
          listen 80;
          server_name  _;

          location /__healthz {
            return 200 "OK";
          }

          location / {
            if ($http_x_forwarded_proto != "https") {
              return 307 https://$host$request_uri;
            }
            root /srv/www/packages;
            add_header Cache-Control $cache_control;
            expires $expires;
            autoindex on;
          }

          location /keys {
            if ($http_x_forwarded_proto != "https") {
              return 307 https://$host$request_uri;
            }
            root /srv/www/;
            expires 2d;
            add_header Cache-Control "public, no-transform";
          }

          location /apt/db {
            deny all;
            return 403;
          }
       }
    }
---

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: gcsmount
spec:
  selector:
    matchLabels:
      name: gcsmount
  template:
    metadata:
      labels:
        name: gcsmount
    spec:
      containers:
      - image: "gcr.io/edgedb-infra/gcsfuse:latest"
        name: "gcsfuse"
        args: ["gcsfuse", "--foreground", "--key-file", "/secrets/storage.json",
               "--uid", "2000", "--gid", "2000", "-o", "allow_other",
               "packages.edgedb-infra.magic.io", "/mounts/repos"]
        volumeMounts:
        - mountPath: "/mounts/"
          name: mount-root
          mountPropagation: Bidirectional
        - mountPath: "/secrets"
          name: storage-credentials

        resources:
          requests:
            cpu: "10m"

        securityContext:
          privileged: true
          capabilities:
            add: ["CAP_SYS_ADMIN"]

        lifecycle:
          postStart:
            exec:
              command: ["mkdir", "-p", "/mounts/repos"]

          preStop:
            exec:
              command: ["fusermount", "-u", "-z", "/mounts/repos"]

      volumes:
      - name: mount-root
        hostPath:
          path: /mounts
          type: DirectoryOrCreate
      - name: storage-credentials
        secret:
          secretName: cloudstorage-mount-bot-credentials
          items:
          - key: service-account-key
            path: storage.json

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: "<service-name>-sshd-config"
  labels:
    app: "<service-name>"
data:
  sshd_config: |
    StrictModes no;
---

apiVersion: "extensions/v1beta1"
kind: "Deployment"
metadata:
  name: "<service-name>"
  namespace: "default"
  labels:
    app: "<service-name>"
spec:
  replicas: 3
  selector:
    matchLabels:
      app: "<service-name>"
  template:
    metadata:
      labels:
        app: "<service-name>"
    spec:
      containers:
      - name: "nginx"
        image: "nginx:latest"
        resources:
          requests:
            cpu: "10m"
        readinessProbe:
          httpGet:
            path: /__healthz
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        ports:
        - containerPort: 80
        volumeMounts:
        - name: gcs-bucket
          mountPath: /srv/www/packages
          readOnly: true
        - name: nginx-conf
          mountPath: /etc/nginx
          readOnly: true
        - name: gpg-pub-keys
          mountPath: /srv/www/keys
          readOnly: true

      - name: "reprepro"
        image: "gcr.io/edgedb-infra/aptrepo:latest"
        imagePullPolicy: Always
        env:
        - name: DEBUG
          value: ""
        - name: PORT
          value: "2222"
        resources:
          requests:
            cpu: "10m"
        readinessProbe:
          tcpSocket:
            port: 2222
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 2222
          initialDelaySeconds: 15
          periodSeconds: 20
        volumeMounts:
        - name: gcs-bucket
          mountPath: /var/lib/repos
          subPath: apt
        - name: root-authorized-keys
          readOnly: true
          mountPath: /root/.ssh/
        - name: gpg-keys
          readOnly: true
          mountPath: /root/gpg-keys/
        - name: uploader-authorized-keys
          readOnly: true
          mountPath: /etc/ssh/authorized_keys/
        - name: host-keys
          readOnly: true
          mountPath: /etc/ssh/
        ports:
        - containerPort: 2222

      - name: "rpmrepo"
        image: "gcr.io/edgedb-infra/rpmrepo:latest"
        imagePullPolicy: Always
        env:
        - name: DEBUG
          value: ""
        - name: PORT
          value: "2223"
        resources:
          requests:
            cpu: "10m"
        readinessProbe:
          tcpSocket:
            port: 2223
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 2223
          initialDelaySeconds: 15
          periodSeconds: 20
        volumeMounts:
        - name: gcs-bucket
          mountPath: /var/lib/repos
          subPath: rpm
        - name: root-authorized-keys
          readOnly: true
          mountPath: /root/.ssh/
        - name: gpg-keys
          readOnly: true
          mountPath: /root/gpg-keys/
        - name: uploader-authorized-keys
          readOnly: true
          mountPath: /etc/ssh/authorized_keys/
        - name: host-keys
          readOnly: true
          mountPath: /etc/ssh/
        ports:
        - containerPort: 2223

      - name: "genrepo"
        image: "gcr.io/edgedb-infra/genrepo:latest"
        imagePullPolicy: Always
        env:
        - name: DEBUG
          value: ""
        - name: PORT
          value: "2224"
        resources:
          requests:
            cpu: "10m"
        readinessProbe:
          tcpSocket:
            port: 2224
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 2224
          initialDelaySeconds: 15
          periodSeconds: 20
        volumeMounts:
        - name: gcs-bucket
          mountPath: /var/lib/repos
        - name: root-authorized-keys
          readOnly: true
          mountPath: /root/.ssh/
        - name: gpg-keys
          readOnly: true
          mountPath: /root/gpg-keys/
        - name: uploader-authorized-keys
          readOnly: true
          mountPath: /etc/ssh/authorized_keys/
        - name: host-keys
          readOnly: true
          mountPath: /etc/ssh/
        ports:
        - containerPort: 2224

      volumes:
      - name: gcs-bucket
        hostPath:
          path: /mounts/repos
          type: Directory
      - name: nginx-conf
        configMap:
          name: "<service-name>-nginx-conf"
      - name: root-authorized-keys
        secret:
          defaultMode: 0400
          secretName: <service-name>-ssh-root-authorized-keys
      - name: uploader-authorized-keys
        secret:
          defaultMode: 0444
          secretName: <service-name>-ssh-uploader-authorized-keys
      - name: host-keys
        secret:
          defaultMode: 0400
          secretName: <service-name>-ssh-host-keys
      - name: gpg-keys
        secret:
          defaultMode: 0400
          secretName: <service-name>-gpg-keys
      - name: gpg-pub-keys
        secret:
          defaultMode: 0444
          secretName: <service-name>-gpg-pub-keys
---

apiVersion: v1
kind: Service
metadata:
  name: "<service-name>"
  annotations:
    beta.cloud.google.com/backend-config: '{"ports": {"80":"<service-name>-backend-config"}}'

spec:
  type: NodePort
  selector:
    app: "<service-name>"
  ports:
  - protocol: TCP
    name: http-port
    port: 80
    targetPort: 80
---

apiVersion: v1
kind: Service
metadata:
  name: "<service-name>-upload"
  annotations:
    edbsre.edgedb.com/service.lb-static-ip-name: "<service-name>-upload"
spec:
  type: LoadBalancer
  selector:
    app: "<service-name>"
  ports:
  - protocol: TCP
    name: deb-ssh-port
    port: 2222
    targetPort: 2222
  - protocol: TCP
    name: rpm-ssh-port
    port: 2223
    targetPort: 2223
  - protocol: TCP
    name: generic-ssh-port
    port: 2224
    targetPort: 2224
---

apiVersion: cloud.google.com/v1beta1
kind: BackendConfig
metadata:
  name: "<service-name>-backend-config"
spec:
  cdn:
    enabled: true
    cachePolicy:
      includeHost: true
      includeProtocol: true
      includeQueryString: false
