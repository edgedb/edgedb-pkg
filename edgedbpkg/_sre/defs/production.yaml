apiVersion: v1
kind: Namespace
metadata:
  name: "<service-name>"
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: "<service-name>-nginx-conf"
  labels:
    app: "<service-name>"
data:
  nginx.conf: |
    user nginx;
    worker_processes  1;
    error_log  /dev/stderr warn;
    pid        /var/run/nginx.pid;
    events {
      worker_connections  1024;
    }
    http {
      default_type  application/octet-stream;
      log_format  main
              'remote_addr:$remote_addr\t'
              'time_local:$time_local\t'
              'method:$request_method\t'
              'uri:$request_uri\t'
              'host:$host\t'
              'status:$status\t'
              'bytes_sent:$body_bytes_sent\t'
              'referer:$http_referer\t'
              'useragent:$http_user_agent\t'
              'forwardedfor:$http_x_forwarded_for\t'
              'forwardedproto:$http_x_forwarded_proto\t'
              'request_time:$request_time';
      access_log  /dev/stdout main;
      sendfile        on;
      keepalive_timeout  65;
      server {
          listen 80;
          server_name  _;

          location /__healthz {
            return 200 "OK";
          }

          location / {
              if ($http_x_forwarded_proto != "https") {
                 return 307 https://$host$request_uri;
              }
              root /srv/www/packages;
              autoindex on;
          }
       }
    }
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: "<service-name>-sshd-config"
  labels:
    app: "<service-name>"
data:
  sshd_config: |
    StrictModes no;
---

apiVersion: "extensions/v1beta1"
kind: "Deployment"
metadata:
  name: "<service-name>"
  namespace: "default"
  labels:
    app: "<service-name>"
spec:
  replicas: 3
  selector:
    matchLabels:
      app: "<service-name>"
  template:
    metadata:
      labels:
        app: "<service-name>"
    spec:
      containers:
      - name: "nginx"
        image: "nginx:latest"
        resources:
          requests:
            cpu: "50m"
        readinessProbe:
          httpGet:
            path: /__healthz
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        ports:
        - containerPort: 80
        volumeMounts:
        - name: repo-root
          mountPath: /srv/www/packages
          readOnly: true
        - name: nginx-conf
          mountPath: /etc/nginx
          readOnly: true

      - name: "reprepro"
        image: "gcr.io/edgedb-infra/aptrepo:latest"
        resources:
          requests:
            cpu: "50m"
        imagePullPolicy: Always
        volumeMounts:
        - name: apt-repo
          mountPath: /var/lib/repos

      - name: "sshd"
        image: panubo/sshd:latest
        resources:
          requests:
            cpu: "50m"
        env:
        - name: DEBUG
          value: "true"
        readinessProbe:
          tcpSocket:
            port: 22
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 22
          initialDelaySeconds: 15
          periodSeconds: 20
        volumeMounts:
        - name: repo-root
          mountPath: /data
        - name: authorized-keys
          readOnly: true
          mountPath: /root/.ssh/
        - name: host-keys
          readOnly: true
          mountPath: /etc/ssh/
        ports:
        - containerPort: 22

      volumes:
      - name: apt-repo
        flexVolume:
          driver: ceph.rook.io/rook
          fsType: ceph
          options:
            fsName: cephfs
            clusterNamespace: rook-ceph
            path: /packages/apt/
      - name: repo-root
        flexVolume:
          driver: ceph.rook.io/rook
          fsType: ceph
          options:
            fsName: cephfs
            clusterNamespace: rook-ceph
            path: /packages/
      - name: nginx-conf
        configMap:
          name: "<service-name>-nginx-conf"
      - name: authorized-keys
        secret:
          defaultMode: 0400
          secretName: <service-name>-ssh-authorized-keys
      - name: host-keys
        secret:
          defaultMode: 0400
          secretName: <service-name>-ssh-host-keys
---

apiVersion: v1
kind: Service
metadata:
  name: "<service-name>"
  annotations:
    beta.cloud.google.com/backend-config: '{"ports": {"80":"<service-name>-backend-config"}}'

spec:
  type: NodePort
  selector:
    app: "<service-name>"
  ports:
  - protocol: TCP
    name: http-port
    port: 80
    targetPort: 80
---

apiVersion: v1
kind: Service
metadata:
  name: "<service-name>-upload"
  annotations:
    edbsre.edgedb.com/service.lb-static-ip-name: "<service-name>-upload"
spec:
  type: LoadBalancer
  selector:
    app: "<service-name>"
  ports:
  - protocol: TCP
    name: ssh-port
    port: 2222
    targetPort: 22
---

apiVersion: cloud.google.com/v1beta1
kind: BackendConfig
metadata:
  name: "<service-name>-backend-config"
spec:
  cdn:
    enabled: true
    cachePolicy:
      includeHost: true
      includeProtocol: true
      includeQueryString: false
