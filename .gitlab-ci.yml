stages:
  - prepare
  - build
  - test
  - publish
  - test-published


# Google Cloud SDK image, used to auth with and push to the
# gcloud docker registry.  Used by the package server image build job.
prepare:gcloud-sdk-image:
  stage: prepare

  except:
    variables:
      - $BUILD == "integration"

  before_script:
    - |
        echo $CI_JOB_TOKEN | \
        docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY

  script:
    - |
        docker build \
            -t ${CI_REGISTRY_IMAGE}/gcloud:latest \
            -f .gitlab/Dockerfile.dind-gcloud \
            .gitlab/ \
        && docker push ${CI_REGISTRY_IMAGE}/gcloud:latest
  tags:
    - docker-in-docker


# Build the package server image used in the package service cluster.
build:server:
  stage: build

  dependencies:
    - prepare:gcloud-sdk-image

  except:
    variables:
      - $BUILD == "integration"

  variables:
    DOCKER_HOST: tcp://docker:2375/

  image: ${CI_REGISTRY_IMAGE}/gcloud:latest

  services:
    - docker:dind

  script:
    - server/build-images.sh

  tags:
    - docker-in-docker


# This step builds the integration docker images
# used for the BUILD=integration jobs that actually
# build, test and publish the packages.
prepare:integration-images:
  before_script:
    - |
        echo $CI_JOB_TOKEN | \
        docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY

  stage: prepare

  script:
    - integration/build-images.sh

  tags:
    - docker-in-docker


.debian: &debian
  PLATFORM: "debian"


.redhat: &redhat
  PLATFORM: "redhat"


.bionic: &bionic
  DISTRO: "bionic"
  DISTRO_FULL: "ubuntu-bionic"


.rhel7: &rhel7
  DISTRO: "centos-7"
  DISTRO_FULL: "centos-7"


.integration:
  only:
    variables:
      - $BUILD == "integration"

  dependencies:
    - prepare:integration-images


.build: &build
  tags:
    - magiclamp

  extends: .integration
  stage: build

  image: ${CI_REGISTRY_IMAGE}/build:${DISTRO_FULL}

  cache:
    paths:
      - $HOME/.cache

  artifacts:
    paths:
      - artifacts

  script:
    - integration/${PLATFORM}/build.sh


.test: &test
  tags:
    - magiclamp

  extends: .integration
  stage: test

  image: ${CI_REGISTRY_IMAGE}/test:${DISTRO_FULL}

  script:
    - integration/${PLATFORM}/test.sh


.publish: &publish
  tags:
    - magiclamp

  image: ${CI_REGISTRY_IMAGE}/upload:${PLATFORM}
  extends: .integration
  stage: publish
  script:
    - integration/${PLATFORM}/publish.sh


.test-published: &test-published
  tags:
    - magiclamp

  image: ${CI_REGISTRY_IMAGE}/testpublished:${DISTRO_FULL}
  extends: .integration
  stage: test-published
  script:
    - integration/${PLATFORM}/test-published.sh


#
# CONCRETE PIPLINES
#


# Ubuntu 18.04

# build:ubuntu-bionic:
#   variables:
#     <<: [*debian, *bionic]
#   extends: .build


# test:ubuntu-bionic:
#   variables:
#     <<: [*debian, *bionic]
#   dependencies:
#     - build:ubuntu-bionic
#   extends: .test


# publish:ubuntu-bionic:
#   variables:
#     <<: [*debian, *bionic]
#   dependencies:
#     # Must depend on both test AND build so that the
#     # package artifacts are passed accordingly.
#     - build:ubuntu-bionic
#     - test:ubuntu-bionic
#   extends: .publish


# test-published:ubuntu-bionic:
#   variables:
#     <<: [*debian, *bionic]
#   dependencies:
#     - publish:ubuntu-bionic
#   extends: .test-published


# # RHEL 7

# build:rhel-7:
#   variables:
#     <<: [*redhat, *rhel7]
#   extends: .build


# test:rhel-7:
#   variables:
#     <<: [*redhat, *rhel7]
#   dependencies:
#     - build:rhel-7
#   extends: .test


# publish:rhel-7:
#   variables:
#     <<: [*redhat, *rhel7]
#   dependencies:
#     # Must depend on both test AND build so that the
#     # package artifacts are passed accordingly.
#     - build:rhel-7
#     - test:rhel-7
#   extends: .publish


# test-published:rhel-7:
#   variables:
#     <<: [*redhat, *rhel7]
#   dependencies:
#     - publish:rhel-7
#   extends: .test-published


# macOS

build:macOS:
  variables:
    PLATFORM: "macos"
    DISTRO: "macos-amd64"
    DISTRO_FULL: "macos-amd64"
  extends: .build
  image: libvirt://macOS:base
